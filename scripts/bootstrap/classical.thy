theory Classical
extends Connectives Match

choose choiceDef:'epsilon:(‚Ñô ‚Üí ‚Ñô) ‚Üí ‚Ñô'
  let 'p:‚Ñô ‚Üí ‚Ñô'
  assume ex:'‚àÉx. p x'
  choose 'chosen:‚Ñô' ex

theorem choice:'‚àÄ p x. (p:‚Ñô ‚Üí ‚Ñô) (x:‚Ñô) ‚Üí p (epsilon p)'
  let p:'p:‚Ñô ‚Üí ‚Ñô'
  let 'x:‚Ñô'
  assume assum:'p x'
  theorem pExists:'‚àÉ x:‚Ñô. p x'
    let ydef:'y:‚Ñô = x'
    modusponens (assum,combine (reflexive p,sym ydef))
  modusponens (pExists,instantiate (choiceDef,'p:‚Ñô ‚Üí ‚Ñô'))

theorem excludedMiddle: '‚àÄp. p ‚à® ¬¨p'
  let 'p:‚Ñô'
  val u = '(x ‚Ü¶ x ‚à® p)'
  val v = '(x ‚Ü¶ ¬¨x ‚à® p)'
  theorem lemma:'(epsilon ‚Äπu‚Ä∫ ‚àß ¬¨(epsilon ‚Äπv‚Ä∫)) ‚Üí p ‚Üí ‚ä•'
    assume asm:'epsilon ‚Äπu‚Ä∫ ‚àß ¬¨(epsilon ‚Äπv‚Ä∫)'
    assume p:'p:‚Ñô'
    val eq =
      trans (treeConv (rewrConv [eqTrueIntro p,orRightZero]) 'epsilon ‚Äπu‚Ä∫' 0,
             sym (treeConv (rewrConv [eqTrueIntro p,orRightZero]) 'epsilon ‚Äπv‚Ä∫' 0))
    val [contr] = convRule (treeConv (rewrConv [eq]),asm)
    modusponens (conjuncts contr 0,
                 matchmp (notDefEx, conjuncts contr 1))
  theorem lemma2: '(epsilon ‚Äπu‚Ä∫ ‚àß ¬¨(epsilon ‚Äπv‚Ä∫)) ‚Üí p ‚à® ¬¨p'
    assume asm:'epsilon ‚Äπu‚Ä∫ ‚àß ¬¨(epsilon ‚Äπv‚Ä∫)'
    orIntroR ('p:‚Ñô',convRule (treeConv (rewrConv [impliesNot]),
                              modusponens (asm,lemma)) 0)
  theorem lemma3: 'p ‚Üí p ‚à® ¬¨p'
    assume p:'p:‚Ñô'
    orIntroL (p,'¬¨p')
  val factored = matchmp
        (sym (instantiate (orAndDistrib2,
              'epsilon ‚Äπu‚Ä∫',
              '¬¨(epsilon ‚Äπv‚Ä∫)',
              'p:‚Ñô')),
         andIntro (matchmp (instantiate (choice,u), orIntroL (truth,'p:‚Ñô')),
                   matchmp (instantiate (choice,v), orIntroL (notFalse,'p:‚Ñô'))))
  matchmp (orDefEx, factored, lemma2, lemma3)

theorem orComplement: '‚àÄp. (p ‚à® ¬¨p) = ‚ä§'
  let p:'p:‚Ñô'
  eqTrueIntro (instantiate (excludedMiddle,p))

theorem boolCases: '‚àÄp. p = ‚ä§ ‚à® p = ‚ä•'
  convRule (randConv (absConv (binaryConv (rewrConv [gsym eqTrueSimp],
                                           rewrConv [gsym eqFalseSimp]))),
            excludedMiddle) 0

# Remove all outer universal quantifiers, returning the variables and a context in
# which those variables have been defined.
def
  stripForall '‚àÄx. ‚Äπp‚Ä∫ x' =
    val [ctx,x,body] = destabs p
    context <ctx>
      match stripForall body
        case [ctx,xs,body] =>
          context <ctx>
            return [ctx,x <+ xs,body]
        case [body]        => return [ctx,[x],body]
  stripForall '‚Äπx‚Ä∫' = [x]

def symConv '‚Äπx‚Ä∫ = ‚Äπy‚Ä∫' =
  theorem left:
    assume asm:'‚Äπx‚Ä∫ = ‚Äπy‚Ä∫'
    sym asm
  theorem right:
    assume asm:'‚Äπy‚Ä∫ = ‚Äπx‚Ä∫'
    sym asm
  [equivalence (left,right)]

def taut tm =
  val [ctx,xs,body] = stripForall tm
  val basicRewrites =
    [notFalseTrue,notTrueFalse,
     orRightZero,orRightId,
     convRule (onceTreeConv (rewrConv [orComm]), orRightZero) 0,
     convRule (onceTreeConv (rewrConv [orComm]), orRightId) 0,
     andRightZero,andRightId,
     convRule (onceTreeConv (rewrConv [andComm]), andRightZero) 0,
     convRule (onceTreeConv (rewrConv [andComm]), andRightId) 0,
     eqTrueSimp,eqFalseSimp,
     convRule (randConv (absConv (landConv symConv)), eqTrueSimp),
     convRule (randConv (absConv (landConv symConv)), eqFalseSimp),
     topDefEq,point,botDefEq,gsym notDefEx]
  def
    tautAux [tm,(x <+ xs),rewrsAcc] =
      val '‚Äπp‚Ä∫ ‚à® ‚Äπnotp‚Ä∫' as caseSplit = instantiate (boolCases,x)
      theorem tautology:
        theorem pCase:
          assume p:p
          tautAux (body, xs, (p <+ rewrsAcc))
        theorem notpCase:
          assume notp:notp
          tautAux (body, xs, (notp <+ rewrsAcc))
        matchmp (orDefEx,caseSplit,pCase,notpCase)
    tautAux ['‚Äπp‚Ä∫:‚Ñô',[],rewrsAcc] =
      eqTrueElim (treeConv (rewrConv rewrsAcc) p 0)
  context <ctx>
    return tautAux (tm, xs, basicRewrites)

choose hilbertChoiceDef: 'epsilonU:(ùí∞ ‚Üí ‚Ñô) ‚Üí ùí∞'
  let 'p:ùí∞ ‚Üí ‚Ñô'
  assume ex:'‚àÉx. p x'
  choose 'chosen' ex

theorem hilbertChoice:'‚àÄ p x. p x ‚Üí p (epsilonU p)'
  let p:'p:ùí∞ ‚Üí ‚Ñô'
  let 'x'
  assume assum:'p x'
  theorem pExists:'‚àÉ x. p x'
    let ydef:'y = x'
    modusponens (assum,combine (reflexive p,sym ydef))
  modusponens (pExists,instantiate (hilbertChoiceDef,'p'))
