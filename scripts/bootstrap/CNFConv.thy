theory CNFConv
extends CNFTheorems

def binderConv c = randConv (absConv c)

def propBinaryConv c =
  tm =>
    match tm
      case '‚Äπ_‚Ä∫ ‚àß ‚Äπ_‚Ä∫' as tm => binaryConv [c,c] tm
      case '‚Äπ_‚Ä∫ ‚à® ‚Äπ_‚Ä∫' as tm => binaryConv [c,c] tm
      case                _  => nil

def
  nnf '¬¨‚Äπ_‚Ä∫'      as tm =
    seqConv
      [sumConv (map [rewrConv, [negInvolve,andDeMorgan,orDeMorgan,notImplies]] ++
                               [existsDeMorganConv,allDeMorganConv]),
       nnf] tm
  nnf '‚Äπ_‚Ä∫ ‚Üí ‚Äπ_‚Ä∫' as tm = seqConv [rewrConv impliesCNF, nnf] tm
  nnf '‚Äπ_‚Ä∫ = ‚Äπ_‚Ä∫' as tm = seqConv [rewrConv equalCNF,   nnf] tm
  nnf                tm = tryConv (sumConv [binderConv nnf, propBinaryConv nnf]) tm


def raiseQuantifiers tm =
  def
    rq '(‚àÉx. ‚ÄπP‚Ä∫ x) ‚àß (‚àÉx. ‚ÄπQ‚Ä∫ x)' = instantiate (conjExists,P,Q)
    rq '(‚àÉx. ‚ÄπP‚Ä∫ x) ‚à® (‚àÉx. ‚ÄπQ‚Ä∫ x)' = instantiate (disjExists,P,Q)
    rq '(‚àÄx. ‚ÄπP‚Ä∫ x) ‚àß (‚àÄx. ‚ÄπQ‚Ä∫ x)' = instantiate (conjAll,P,Q)
    rq '(‚àÄx. ‚ÄπP‚Ä∫ x) ‚à® (‚àÄx. ‚ÄπQ‚Ä∫ x)' = instantiate (disjAll,P,Q)
    rq '(‚àÉx. ‚ÄπP‚Ä∫ x) ‚àß (‚àÄx. ‚ÄπQ‚Ä∫ x)' = instantiate (conjExistsAll,P,Q)
    rq '(‚àÉx. ‚ÄπP‚Ä∫ x) ‚à® (‚àÄx. ‚ÄπQ‚Ä∫ x)' = instantiate (disjExistsAll,P,Q)
    rq '(‚àÉx. ‚ÄπP‚Ä∫ x) ‚àß ‚Äπq‚Ä∫' as tm   = seqConv [randConv trivUnAllConv, rq,
                                              binderConv trivAllConv] tm
    rq '(‚àÉx. ‚ÄπP‚Ä∫ x) ‚à® ‚Äπq‚Ä∫' as tm   = seqConv [randConv trivUnAllConv, rq,
                                     binderConv trivAllConv] tm
    rq '(‚àÄx. ‚ÄπP‚Ä∫ x) ‚àß ‚Äπq‚Ä∫' as tm   = seqConv [randConv trivUnAllConv, rq,
                                              binderConv trivAllConv] tm
    rq '(‚àÄx. ‚ÄπP‚Ä∫ x) ‚à® ‚Äπq‚Ä∫' as tm   = seqConv [randConv trivUnAllConv, rq,
                                              binderConv trivAllConv] tm
    rq tm                          = zeroConv tm
  val rqComm = sumConv [rq,
                        seqConv [rewrConv1 andComm, rq],
                        seqConv [rewrConv1 orComm,  rq]]
  def convl c = sumConv [binderConv (binderConv c), binderConv c]
  sumConv [binderConv raiseQuantifiers,
           seqConv [propBinaryConv raiseQuantifiers, repeatConvl [convl,rqComm]],
           idConv]
          tm

def
  cnfConv '‚Äπ_‚Ä∫ ‚àß ‚Äπ_‚Ä∫' as tm = binaryConv (cnfConv,cnfConv) tm
  cnfConv '‚Äπ_‚Ä∫ ‚à® ‚Äπ_‚Ä∫' as tm =
    seqConv [binaryConv (cnfConv,cnfConv), disjConv] tm
  cnfConv tm = tryConv (binderConv cnfConv) tm
  disjConv '(‚Äπ_‚Ä∫ ‚àß ‚Äπ_‚Ä∫) ‚à® ‚Äπ_‚Ä∫' as tm =
    seqConv [rewrConv orDistribRight, binaryConv (disjConv, disjConv)] tm
  disjConv '‚Äπ_‚Ä∫ ‚à® (‚Äπ_‚Ä∫ ‚àß ‚Äπ_‚Ä∫)' as tm =
    seqConv [rewrConv orDistribLeft, binaryConv (disjConv, disjConv)] tm
  disjConv tm = idConv tm

def
  mkFunTy [ty]        = ty
  mkFunTy (ty <+ tys) = ': ‚Äπty ‚Ä∫ ‚Üí ‚ÄπmkFunTy tys‚Ä∫'

def
  mkComb [v]       = v
  mkComb (vs +> v) = '‚ÄπmkComb vs‚Ä∫ ‚Äπv‚Ä∫'

def
  typeOf '‚Äπ_‚Ä∫: ‚Äπa‚Ä∫' = a

def bindersConv c =
  tm =>
    sumConv [c, if iscomb tm and isabs (rand tm)
                then binderConv (bindersConv c)
                else zeroConv tm] tm

val skolem1 =
  def
    skolem1 '‚àÄx: ‚Äπa‚Ä∫. ‚àÉy: ‚Äπb‚Ä∫. ‚Äπp‚Ä∫ x y' =
      theorem '(‚àÄx. ‚àÉy. ‚Äπp‚Ä∫ x y) = (‚àÉf: ‚Äπa‚Ä∫ ‚Üí ‚Äπb‚Ä∫. ‚àÄx. ‚Äπp‚Ä∫ x (f x))'
        theorem left: true
          assume asm:'‚àÄx. ‚àÉy. ‚Äπp‚Ä∫ x y'
          choose '‚Äπfresh "f"‚Ä∫' asm
        theorem right: '(‚àÉf:‚Äπa‚Ä∫ ‚Üí ‚Äπb‚Ä∫. ‚àÄx. ‚Äπp‚Ä∫ x (f x)) ‚Üí (‚àÄx. ‚àÉy. ‚Äπp‚Ä∫ x y)'
          assume asm:'‚àÉf: ‚Äπa‚Ä∫ ‚Üí ‚Äπb‚Ä∫. ‚àÄx. ‚Äπp‚Ä∫ x (f x)'
          let x:'‚Äπfresh "x"‚Ä∫: ‚Äπa‚Ä∫'
          theorem '‚àÉy. ‚Äπp‚Ä∫ ‚Äπx‚Ä∫ y'
            choose ch:'‚Äπfresh "f"‚Ä∫:‚Äπa‚Ä∫ ‚Üí ‚Äπb‚Ä∫' asm
            val fx = rand (instantiate (ch,x): Term)
            let ydef:'y = ‚Äπfx‚Ä∫'
            convRule (seqConv [randConv (subsConv (gsym ydef)),normalize],
                      instantiate (ch,x))
        equivalence (left,right)
    skolem1 tm = zeroConv tm
  seqConv [skolem1,normalize]

def
  timesConvl [_,c,0] = c
  timesConvl [k,c,n] = timesConvl [k,k c,n-1]

context
  val cthm =
    seqConv [nnf,raiseQuantifiers,cnfConv] '‚àÄp q. (‚àÉx y. p x y) = (‚àÉz. q z)'
  val ctm = rhs (cthm: Term)
  assert
    (ctm == '‚àÄp: ùí∞ ‚Üí ùí∞ ‚Üí ‚Ñô. ‚àÄq. ‚àÉx. ‚àÄy z. ‚àÉw u. ((p x w) ‚à® (¬¨q z)) ‚àß (q u ‚à® ¬¨(p y z))')
  show ctm
  show (rhs (seqConv [timesConvl
                        [binderConv,
                         seqConv [skolem1,binderConv skolem1],
                         4],
                      timesConvl
                        [binderConv,
                         seqConv [skolem1,binderConv skolem1],
                         3],
                      timesConvl
                        [binderConv,
                         seqConv [skolem1,binderConv skolem1],
                         1],
                       skolem1,
                       binderConv skolem1,
                       timesConvl
                         [binderConv,
                          skolem1,
                          3],
                       timesConvl
                         [binderConv,
                          skolem1,
                          2]
                          ]
                      ctm: Term))
  # val sthm = skolem1 ctm
  # val stm = rhs (sthm: Term)
  # show (rhs (normalize (stm: Term)))
